# ======================================
# Garden 造園業DXシステム 本番環境デプロイ設定
# 1社向け低コストデプロイメント - Docker Compose
# ======================================

version: '3.8'

services:
  # ======================================
  # フロントエンド (React + Nginx)
  # ======================================
  garden-frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.production
      args:
        - NODE_ENV=production
        - REACT_APP_API_URL=${REACT_APP_API_URL:-https://api.garden-dx.com}
        - REACT_APP_VERSION=${VERSION:-1.0.0}
    image: garden-frontend:latest
    container_name: garden-frontend-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - frontend-logs:/var/log/nginx
    environment:
      - NGINX_HOST=${DOMAIN_NAME:-localhost}
      - NGINX_PORT=80
    depends_on:
      - garden-backend
    networks:
      - garden-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.garden-frontend.rule=Host(`${DOMAIN_NAME:-localhost}`)"
      - "traefik.http.routers.garden-frontend.tls=true"
      - "traefik.http.routers.garden-frontend.tls.certresolver=letsencrypt"

  # ======================================
  # バックエンド (FastAPI + Uvicorn)
  # ======================================
  garden-backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.production
      args:
        - PYTHON_ENV=production
    image: garden-backend:latest
    container_name: garden-backend-prod
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - backend-logs:/app/logs
      - backend-uploads:/app/uploads
      - ./backups:/app/backups
    environment:
      # データベース設定
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@garden-db:5432/${POSTGRES_DB}
      
      # セキュリティ設定
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRE_HOURS=24
      
      # CORS設定
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-https://${DOMAIN_NAME:-localhost}}
      
      # メール設定
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM_EMAIL=${SMTP_FROM_EMAIL}
      
      # ファイルアップロード設定
      - MAX_FILE_SIZE=10485760  # 10MB
      - UPLOAD_PATH=/app/uploads
      
      # 監視・ログ設定
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SENTRY_DSN=${SENTRY_DSN}
      
      # 造園業界特化設定
      - LANDSCAPING_INDUSTRY_MODE=true
      - DEFAULT_TAX_RATE=0.10
      - CURRENCY=JPY
      - TIMEZONE=Asia/Tokyo
      - LOCALE=ja_JP
    depends_on:
      garden-db:
        condition: service_healthy
    networks:
      - garden-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ======================================
  # データベース (PostgreSQL 15)
  # ======================================
  garden-db:
    image: postgres:15-alpine
    container_name: garden-db-prod
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/backups:/backups
      - postgres-logs:/var/log/postgresql
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-garden_production}
      - POSTGRES_USER=${POSTGRES_USER:-garden_admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
      - TZ=Asia/Tokyo
      
      # PostgreSQL最適化設定
      - POSTGRES_SHARED_BUFFERS=256MB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=1GB
      - POSTGRES_WORK_MEM=4MB
      - POSTGRES_MAINTENANCE_WORK_MEM=64MB
      - POSTGRES_MAX_CONNECTIONS=100
      - POSTGRES_CHECKPOINT_COMPLETION_TARGET=0.9
      - POSTGRES_WAL_BUFFERS=16MB
      - POSTGRES_DEFAULT_STATISTICS_TARGET=100
    command: |
      postgres
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c max_connections=100
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c log_statement=all
      -c log_duration=on
      -c log_min_duration_statement=1000ms
    networks:
      - garden-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # ======================================
  # Redis (キャッシュ・セッション管理)
  # ======================================
  garden-redis:
    image: redis:7-alpine
    container_name: garden-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - garden-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ======================================
  # 監視 (Prometheus + Grafana)
  # ======================================
  prometheus:
    image: prom/prometheus:latest
    container_name: garden-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - garden-network

  grafana:
    image: grafana/grafana:latest
    container_name: garden-grafana-prod
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - garden-network

  # ======================================
  # バックアップサービス
  # ======================================
  garden-backup:
    build:
      context: ./backup
      dockerfile: Dockerfile
    container_name: garden-backup-prod
    restart: unless-stopped
    volumes:
      - postgres-data:/source/postgres:ro
      - backend-uploads:/source/uploads:ro
      - ./backups:/backups
    environment:
      - POSTGRES_HOST=garden-db
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}  # 毎日2時にバックアップ
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - S3_BUCKET=${S3_BACKUP_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-ap-northeast-1}
    depends_on:
      - garden-db
    networks:
      - garden-network

  # ======================================
  # SSL証明書自動更新 (Let's Encrypt)
  # ======================================
  certbot:
    image: certbot/certbot:latest
    container_name: garden-certbot-prod
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./ssl-challenges:/var/www/certbot
    command: >
      sh -c "
        while :; do
          certbot renew --webroot --webroot-path=/var/www/certbot --quiet
          sleep 12h
        done
      "

# ======================================
# ネットワーク設定
# ======================================
networks:
  garden-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ======================================
# ボリューム設定
# ======================================
volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis
  
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/prometheus
  
  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/grafana
  
  backend-uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/uploads
  
  frontend-logs:
    driver: local
  
  backend-logs:
    driver: local
  
  postgres-logs:
    driver: local
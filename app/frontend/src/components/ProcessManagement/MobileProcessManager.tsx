/**
 * Garden Mobile Process Manager - „Çπ„Éû„ÉõÂØæÂøúÂ∑•Á®ãÁÆ°ÁêÜ
 * ÈÄ†Âúí‰∫ãÊ•≠ËÄÖÂêë„Åë„É¢„Éê„Ç§„É´Â∑•Á®ãË°®‰ΩúÊàê„Ç∑„Çπ„ÉÜ„É†
 * 
 * Created by: worker2 (Production Ready - Mobile First)
 * Date: 2025-07-01
 */

import React, { useState, useEffect, useMemo, useCallback } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Grid,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Chip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  IconButton,
  Tooltip,
  Alert,
  LinearProgress,
  List,
  ListItem,
  ListItemText,
  ListItemAvatar,
  ListItemSecondaryAction,
  Avatar,
  Fab,
  Collapse,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  BottomNavigation,
  BottomNavigationAction,
  SwipeableDrawer,
  useTheme,
  useMediaQuery,
  Divider
} from '@mui/material';

import {
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Save as SaveIcon,
  AutorenewOutlined as AutoIcon,
  CalendarToday as CalendarIcon,
  Timeline as TimelineIcon,
  Nature as PlantIcon,
  Build as ToolIcon,
  ExpandMore as ExpandMoreIcon,
  KeyboardArrowUp as ArrowUpIcon,
  KeyboardArrowDown as ArrowDownIcon,
  ViewList as ListIcon,
  ViewModule as GridIcon,
  FilterList as FilterIcon,
  Search as SearchIcon,
  CheckCircle as CheckIcon,
  Schedule as ScheduleIcon
} from '@mui/icons-material';

import { 
  ProcessSchedule, 
  ProcessTask, 
  ProcessTemplate
} from '../../types/process.types';

// Â∑•Á®ã„Ç´„ÉÜ„Ç¥„É™„ÅÆËâ≤ÂàÜ„ÅëÔºà„É¢„Éê„Ç§„É´Áî®ÊúÄÈÅ©ÂåñÔºâ
const MOBILE_CATEGORY_COLORS = {
  survey: '#2E7D32',
  design: '#1976D2',
  procurement: '#F57C00',
  demolition: '#D32F2F',
  foundation: '#8D6E63',
  planting: '#4CAF50',
  decoration: '#9C27B0',
  finishing: '#607D8B',
  delivery: '#689F38',
  maintenance: '#00ACC1',
  legal: '#5D4037',
  preparation: '#FF9800',
  infrastructure: '#3F51B5'
};

// ÈÄ†ÂúíÊ•≠Â∑•Á®ã„ÉÜ„É≥„Éó„É¨„Éº„ÉàÔºà„É¢„Éê„Ç§„É´ÊúÄÈÅ©ÂåñÔºâ
const MOBILE_PROCESS_TEMPLATES = [
  {
    id: 'garden-basic',
    name: 'Âü∫Êú¨ÈÄ†ÂúíÂ∑•‰∫ã',
    description: 'Â∫≠ÂúíÂ∑•‰∫ã(7-14Êó•)',
    icon: 'üå≥',
    estimatedDays: 14,
    tasks: [
      { name: 'ÁèæÂú∞Ë™øÊüª', duration: 1, category: 'survey' },
      { name: 'Ë®≠Ë®à‰ΩúÊàê', duration: 3, category: 'design' },
      { name: 'Ë≥áÊùêË™øÈÅî', duration: 2, category: 'procurement' },
      { name: 'Êó¢Â≠òÊí§Âéª', duration: 2, category: 'demolition' },
      { name: 'Âü∫Á§éÂ∑•‰∫ã', duration: 3, category: 'foundation' },
      { name: 'Ê§çÊ†ΩÂ∑•‰∫ã', duration: 4, category: 'planting' },
      { name: 'Â§ñÊßãÂ∑•‰∫ã', duration: 3, category: 'decoration' },
      { name: '‰ªï‰∏ä„Åí', duration: 1, category: 'finishing' }
    ]
  },
  {
    id: 'maintenance',
    name: '„É°„É≥„ÉÜ„Éä„É≥„Çπ',
    description: 'ÂÆöÊúüÁÆ°ÁêÜ(1-3Êó•)',
    icon: '‚úÇÔ∏è',
    estimatedDays: 3,
    tasks: [
      { name: 'Áä∂Ê≥ÅÁ¢∫Ë™ç', duration: 0.5, category: 'survey' },
      { name: 'Ââ™ÂÆö‰ΩúÊ•≠', duration: 1, category: 'maintenance' },
      { name: 'Èô§Ëçâ„ÉªÊñΩËÇ•', duration: 1, category: 'maintenance' },
      { name: 'Ë®≠ÂÇôÁÇπÊ§ú', duration: 0.5, category: 'maintenance' }
    ]
  },
  {
    id: 'large-project',
    name: 'Â§ßË¶èÊ®°Â∑•‰∫ã',
    description: 'ÂÖ¨Âúí„ÉªÊñΩË®≠(1-3„É∂Êúà)',
    icon: 'üèóÔ∏è',
    estimatedDays: 90,
    tasks: [
      { name: '‰ºÅÁîªË®≠Ë®à', duration: 14, category: 'design' },
      { name: 'Ë®±ÂèØÁî≥Ë´ã', duration: 14, category: 'legal' },
      { name: 'Ë≥áÊùêË™øÈÅî', duration: 7, category: 'procurement' },
      { name: '‰ªÆË®≠Â∑•‰∫ã', duration: 3, category: 'preparation' },
      { name: 'ÈÄ†ÊàêÂ∑•‰∫ã', duration: 21, category: 'foundation' },
      { name: 'Ê§çÊ†ΩÂ∑•‰∫ã', duration: 28, category: 'planting' },
      { name: 'Â§ñÊßãÂ∑•‰∫ã', duration: 21, category: 'decoration' }
    ]
  }
];

interface MobileProcessManagerProps {
  selectedProject?: any;
  onScheduleCreated?: (schedule: ProcessSchedule) => void;
  onScheduleUpdated?: (schedule: ProcessSchedule) => void;
}

const MobileProcessManager: React.FC<MobileProcessManagerProps> = ({
  selectedProject,
  onScheduleCreated,
  onScheduleUpdated
}) => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isSmallMobile = useMediaQuery('(max-width:375px)');

  // State Management
  const [projects, setProjects] = useState<any[]>([]);
  const [selectedProjectId, setSelectedProjectId] = useState<number | null>(
    selectedProject?.project_id || null
  );
  const [currentSchedule, setCurrentSchedule] = useState<ProcessSchedule | null>(null);
  const [selectedTemplate, setSelectedTemplate] = useState<string>('garden-basic');
  const [viewMode, setViewMode] = useState<'list' | 'timeline'>('list');
  const [showFilters, setShowFilters] = useState(false);
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [filterCategory, setFilterCategory] = useState<string>('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [editingTask, setEditingTask] = useState<ProcessTask | null>(null);
  const [showTaskDialog, setShowTaskDialog] = useState(false);
  const [expandedAccordion, setExpandedAccordion] = useState<string | false>('project-select');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [bottomNavValue, setBottomNavValue] = useState(0);

  // Mock data for demonstration
  useEffect(() => {
    const mockProjects = [
      {
        project_id: 1,
        name: 'Áî∞‰∏≠ÊßòÈÇ∏Â∫≠Âúí„É™„Éï„Ç©„Éº„É†',
        customer_name: 'Áî∞‰∏≠Â§™ÈÉé',
        status: 'active',
        location: 'Êù±‰∫¨ÈÉΩ‰∏ñÁî∞Ë∞∑Âå∫'
      },
      {
        project_id: 2,
        name: 'Â±±Áî∞„Éû„É≥„Ç∑„Éß„É≥Ê§çÊ†ΩÂ∑•‰∫ã',
        customer_name: 'Â±±Áî∞Âª∫Ë®≠',
        status: 'planning',
        location: 'Á•ûÂ•àÂ∑ùÁúåÊ®™ÊµúÂ∏Ç'
      },
      {
        project_id: 3,
        name: '‚óã‚óãÂÖ¨Âúí„É°„É≥„ÉÜ„Éä„É≥„Çπ',
        customer_name: '‚óã‚óãÂ∏ÇÂΩπÊâÄ',
        status: 'in_progress',
        location: 'ÂüºÁéâÁúå„Åï„ÅÑ„Åü„ÅæÂ∏Ç'
      }
    ];
    setProjects(mockProjects);
  }, []);

  // Â∑•Á®ãË°®Ëá™ÂãïÁîüÊàê
  const generateMobileSchedule = useCallback(() => {
    if (!selectedProjectId) return;

    const template = MOBILE_PROCESS_TEMPLATES.find(t => t.id === selectedTemplate);
    if (!template) return;

    const project = projects.find(p => p.project_id === selectedProjectId);
    if (!project) return;

    const startDate = new Date();
    const tasks: ProcessTask[] = template.tasks.map((task, index) => {
      const taskStartDate = new Date(startDate);
      taskStartDate.setDate(taskStartDate.getDate() + index);
      
      const endDate = new Date(taskStartDate);
      endDate.setDate(endDate.getDate() + task.duration);

      return {
        id: index + 1,
        name: task.name,
        description: `${task.name}„ÅÆ‰ΩúÊ•≠`,
        start_date: taskStartDate.toISOString().split('T')[0],
        end_date: endDate.toISOString().split('T')[0],
        duration: task.duration,
        progress: 0,
        category: task.category,
        dependencies: [],
        assigned_to: '',
        status: 'planned' as const,
        priority: 'medium' as const
      };
    });

    const newSchedule: ProcessSchedule = {
      id: Date.now(),
      project_id: selectedProjectId,
      name: `${project.name} - ${template.name}`,
      description: `${template.description}`,
      start_date: startDate.toISOString().split('T')[0],
      end_date: tasks[tasks.length - 1]?.end_date || startDate.toISOString().split('T')[0],
      tasks,
      template_id: template.id,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };

    setCurrentSchedule(newSchedule);
    setExpandedAccordion('schedule-view');
  }, [selectedProjectId, selectedTemplate, projects]);

  // „Éï„Ç£„É´„Çø„Åï„Çå„Åü„Çø„Çπ„ÇØ
  const filteredTasks = useMemo(() => {
    if (!currentSchedule) return [];

    return currentSchedule.tasks.filter(task => {
      const matchesStatus = filterStatus === 'all' || task.status === filterStatus;
      const matchesCategory = filterCategory === 'all' || task.category === filterCategory;
      const matchesSearch = searchQuery === '' || 
        task.name.toLowerCase().includes(searchQuery.toLowerCase());
      
      return matchesStatus && matchesCategory && matchesSearch;
    });
  }, [currentSchedule, filterStatus, filterCategory, searchQuery]);

  // ÈÄ≤ÊçóÁµ±Ë®à
  const progressStats = useMemo(() => {
    if (!currentSchedule || currentSchedule.tasks.length === 0) {
      return { completed: 0, inProgress: 0, planned: 0, overall: 0 };
    }

    const tasks = currentSchedule.tasks;
    const completed = tasks.filter(t => t.status === 'completed').length;
    const inProgress = tasks.filter(t => t.status === 'in_progress').length;
    const planned = tasks.filter(t => t.status === 'planned').length;
    const overall = Math.round(tasks.reduce((sum, t) => sum + t.progress, 0) / tasks.length);

    return { completed, inProgress, planned, overall };
  }, [currentSchedule]);

  // „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÈÅ∏Êäû„Ç´„Éº„Éâ
  const ProjectSelectionCard = () => (
    <Card sx={{ mb: 2 }}>
      <Accordion 
        expanded={expandedAccordion === 'project-select'} 
        onChange={() => setExpandedAccordion(
          expandedAccordion === 'project-select' ? false : 'project-select'
        )}
      >
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <PlantIcon sx={{ color: '#4CAF50' }} />
            <Typography variant={isSmallMobile ? 'body1' : 'h6'} fontWeight="bold">
              Ê°à‰ª∂ÈÅ∏Êäû
            </Typography>
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Grid container spacing={2}>
            <Grid item xs={12}>
              <FormControl fullWidth size="small">
                <InputLabel>Â∑•‰∫ãÊ°à‰ª∂„ÇíÈÅ∏Êäû</InputLabel>
                <Select
                  value={selectedProjectId || ''}
                  onChange={(e) => setSelectedProjectId(Number(e.target.value))}
                  label="Â∑•‰∫ãÊ°à‰ª∂„ÇíÈÅ∏Êäû"
                >
                  {projects.map((project) => (
                    <MenuItem key={project.project_id} value={project.project_id}>
                      <Box>
                        <Typography variant="body2">{project.name}</Typography>
                        <Typography variant="caption" color="textSecondary">
                          {project.customer_name} - {project.location}
                        </Typography>
                      </Box>
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12}>
              <Typography variant="subtitle2" gutterBottom>
                Â∑•Á®ã„ÉÜ„É≥„Éó„É¨„Éº„Éà
              </Typography>
              <Grid container spacing={1}>
                {MOBILE_PROCESS_TEMPLATES.map((template) => (
                  <Grid item xs={12} key={template.id}>
                    <Card
                      sx={{
                        p: 1,
                        cursor: 'pointer',
                        border: selectedTemplate === template.id ? 2 : 1,
                        borderColor: selectedTemplate === template.id ? 'primary.main' : 'divider',
                        bgcolor: selectedTemplate === template.id ? 'primary.50' : 'background.paper'
                      }}
                      onClick={() => setSelectedTemplate(template.id)}
                    >
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Typography sx={{ fontSize: '1.2rem' }}>
                          {template.icon}
                        </Typography>
                        <Box sx={{ flex: 1 }}>
                          <Typography variant="body2" fontWeight="medium">
                            {template.name}
                          </Typography>
                          <Typography variant="caption" color="textSecondary">
                            {template.description}
                          </Typography>
                        </Box>
                      </Box>
                    </Card>
                  </Grid>
                ))}
              </Grid>
            </Grid>

            <Grid item xs={12}>
              <Button
                fullWidth
                variant="contained"
                startIcon={<AutoIcon />}
                onClick={generateMobileSchedule}
                disabled={!selectedProjectId}
                sx={{ 
                  bgcolor: '#4CAF50', 
                  '&:hover': { bgcolor: '#388E3C' },
                  py: 1.5
                }}
              >
                Â∑•Á®ãË°®„ÇíËá™ÂãïÁîüÊàê
              </Button>
            </Grid>
          </Grid>
        </AccordionDetails>
      </Accordion>
    </Card>
  );

  // Â∑•Á®ãË°®Ê¶ÇË¶Å„Ç´„Éº„Éâ
  const ScheduleOverviewCard = () => {
    if (!currentSchedule) return null;

    return (
      <Card sx={{ mb: 2 }}>
        <Accordion 
          expanded={expandedAccordion === 'schedule-overview'} 
          onChange={() => setExpandedAccordion(
            expandedAccordion === 'schedule-overview' ? false : 'schedule-overview'
          )}
        >
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: '100%' }}>
              <TimelineIcon sx={{ color: '#4CAF50' }} />
              <Box sx={{ flex: 1 }}>
                <Typography variant="body1" fontWeight="bold">
                  {currentSchedule.name}
                </Typography>
                <Typography variant="caption" color="textSecondary">
                  ÂÖ®‰ΩìÈÄ≤Êçó: {progressStats.overall}%
                </Typography>
              </Box>
              <CircularProgress value={progressStats.overall} size={40} />
            </Box>
          </AccordionSummary>
          <AccordionDetails>
            <Box>
              <Typography variant="body2" color="textSecondary" gutterBottom>
                {currentSchedule.description}
              </Typography>
              
              <Grid container spacing={1} sx={{ mb: 2 }}>
                <Grid item xs={6}>
                  <Typography variant="caption" color="textSecondary">
                    ÈñãÂßãÊó•
                  </Typography>
                  <Typography variant="body2">
                    {currentSchedule.start_date}
                  </Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="caption" color="textSecondary">
                    ÂÆå‰∫Ü‰∫àÂÆö
                  </Typography>
                  <Typography variant="body2">
                    {currentSchedule.end_date}
                  </Typography>
                </Grid>
              </Grid>

              <Box sx={{ mb: 2 }}>
                <Typography variant="caption" color="textSecondary">
                  ÈÄ≤ÊçóÁä∂Ê≥Å
                </Typography>
                <LinearProgress 
                  variant="determinate" 
                  value={progressStats.overall} 
                  sx={{ height: 8, borderRadius: 4, mb: 1 }}
                />
              </Box>

              <Grid container spacing={1}>
                <Grid item xs={4}>
                  <Box sx={{ textAlign: 'center' }}>
                    <Typography variant="h6" color="success.main">
                      {progressStats.completed}
                    </Typography>
                    <Typography variant="caption">ÂÆå‰∫Ü</Typography>
                  </Box>
                </Grid>
                <Grid item xs={4}>
                  <Box sx={{ textAlign: 'center' }}>
                    <Typography variant="h6" color="primary.main">
                      {progressStats.inProgress}
                    </Typography>
                    <Typography variant="caption">ÈÄ≤Ë°å‰∏≠</Typography>
                  </Box>
                </Grid>
                <Grid item xs={4}>
                  <Box sx={{ textAlign: 'center' }}>
                    <Typography variant="h6" color="text.secondary">
                      {progressStats.planned}
                    </Typography>
                    <Typography variant="caption">‰∫àÂÆö</Typography>
                  </Box>
                </Grid>
              </Grid>
            </Box>
          </AccordionDetails>
        </Accordion>
      </Card>
    );
  };

  // ÂÜÜÂΩ¢ÈÄ≤ÊçóË°®Á§∫
  const CircularProgress = ({ value, size = 40 }: { value: number; size?: number }) => (
    <Box
      sx={{
        position: 'relative',
        display: 'inline-flex',
        width: size,
        height: size
      }}
    >
      <svg width={size} height={size}>
        <circle
          cx={size / 2}
          cy={size / 2}
          r={(size - 4) / 2}
          fill="none"
          stroke="#E0E0E0"
          strokeWidth={3}
        />
        <circle
          cx={size / 2}
          cy={size / 2}
          r={(size - 4) / 2}
          fill="none"
          stroke="#4CAF50"
          strokeWidth={3}
          strokeDasharray={`${(value / 100) * 2 * Math.PI * ((size - 4) / 2)} ${2 * Math.PI * ((size - 4) / 2)}`}
          strokeDashoffset={0}
          transform={`rotate(-90 ${size / 2} ${size / 2})`}
        />
      </svg>
      <Box
        sx={{
          position: 'absolute',
          top: 0,
          left: 0,
          bottom: 0,
          right: 0,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center'
        }}
      >
        <Typography variant="caption" fontWeight="bold">
          {value}%
        </Typography>
      </Box>
    </Box>
  );

  // „Çø„Çπ„ÇØ„É™„Çπ„ÉàË°®Á§∫
  const TaskListView = () => (
    <Card>
      <CardContent sx={{ p: 1 }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2, px: 1 }}>
          <ToolIcon sx={{ color: '#4CAF50' }} />
          <Typography variant="subtitle1" fontWeight="bold" sx={{ flex: 1 }}>
            Â∑•Á®ã‰∏ÄË¶ß
          </Typography>
          <IconButton size="small" onClick={() => setShowFilters(!showFilters)}>
            <FilterIcon />
          </IconButton>
        </Box>

        <Collapse in={showFilters}>
          <Box sx={{ mb: 2, px: 1 }}>
            <Grid container spacing={1}>
              <Grid item xs={6}>
                <FormControl fullWidth size="small">
                  <InputLabel>„Çπ„ÉÜ„Éº„Çø„Çπ</InputLabel>
                  <Select
                    value={filterStatus}
                    onChange={(e) => setFilterStatus(e.target.value)}
                    label="„Çπ„ÉÜ„Éº„Çø„Çπ"
                  >
                    <MenuItem value="all">„Åô„Åπ„Å¶</MenuItem>
                    <MenuItem value="planned">‰∫àÂÆö</MenuItem>
                    <MenuItem value="in_progress">ÈÄ≤Ë°å‰∏≠</MenuItem>
                    <MenuItem value="completed">ÂÆå‰∫Ü</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
              <Grid item xs={6}>
                <FormControl fullWidth size="small">
                  <InputLabel>„Ç´„ÉÜ„Ç¥„É™</InputLabel>
                  <Select
                    value={filterCategory}
                    onChange={(e) => setFilterCategory(e.target.value)}
                    label="„Ç´„ÉÜ„Ç¥„É™"
                  >
                    <MenuItem value="all">„Åô„Åπ„Å¶</MenuItem>
                    <MenuItem value="survey">Ë™øÊüª</MenuItem>
                    <MenuItem value="design">Ë®≠Ë®à</MenuItem>
                    <MenuItem value="planting">Ê§çÊ†Ω</MenuItem>
                    <MenuItem value="decoration">Â§ñÊßã</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
            </Grid>
            <TextField
              fullWidth
              size="small"
              placeholder="Â∑•Á®ãÂêç„ÅßÊ§úÁ¥¢..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              InputProps={{
                startAdornment: <SearchIcon sx={{ mr: 1, color: 'action.active' }} />
              }}
              sx={{ mt: 1 }}
            />
          </Box>
        </Collapse>

        <List sx={{ p: 0 }}>
          {filteredTasks.map((task, index) => (
            <React.Fragment key={task.id}>
              <ListItem
                sx={{
                  border: 1,
                  borderColor: 'divider',
                  borderRadius: 1,
                  mb: 1,
                  bgcolor: 'background.paper'
                }}
              >
                <ListItemAvatar>
                  <Avatar
                    sx={{
                      bgcolor: MOBILE_CATEGORY_COLORS[task.category] || '#757575',
                      width: 32,
                      height: 32
                    }}
                  >
                    {task.category === 'planting' ? 'üå±' : 
                     task.category === 'design' ? 'üìê' :
                     task.category === 'survey' ? 'üìè' : 'üîß'}
                  </Avatar>
                </ListItemAvatar>
                
                <ListItemText
                  primary={
                    <Typography variant="body2" fontWeight="medium">
                      {task.name}
                    </Typography>
                  }
                  secondary={
                    <Box>
                      <Typography variant="caption" color="textSecondary">
                        {task.start_date} - {task.end_date} ({task.duration}Êó•)
                      </Typography>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mt: 0.5 }}>
                        <LinearProgress
                          variant="determinate"
                          value={task.progress}
                          sx={{ flex: 1, height: 4, borderRadius: 2 }}
                        />
                        <Typography variant="caption">
                          {task.progress}%
                        </Typography>
                      </Box>
                      <Box sx={{ display: 'flex', gap: 0.5, mt: 0.5 }}>
                        <Chip
                          label={task.status === 'planned' ? '‰∫àÂÆö' :
                                task.status === 'in_progress' ? 'ÈÄ≤Ë°å‰∏≠' :
                                task.status === 'completed' ? 'ÂÆå‰∫Ü' : task.status}
                          size="small"
                          color={
                            task.status === 'completed' ? 'success' :
                            task.status === 'in_progress' ? 'primary' : 'default'
                          }
                          sx={{ fontSize: '0.7rem', height: 20 }}
                        />
                      </Box>
                    </Box>
                  }
                />
                
                <ListItemSecondaryAction>
                  <IconButton
                    size="small"
                    onClick={() => {
                      setEditingTask(task);
                      setShowTaskDialog(true);
                    }}
                  >
                    <EditIcon fontSize="small" />
                  </IconButton>
                </ListItemSecondaryAction>
              </ListItem>
            </React.Fragment>
          ))}
        </List>
      </CardContent>
    </Card>
  );

  return (
    <Box sx={{ pb: 8 }}>
      {/* „Éò„ÉÉ„ÉÄ„Éº */}
      <Box sx={{ p: 2, bgcolor: 'primary.main', color: 'white', mb: 2 }}>
        <Typography variant="h6" fontWeight="bold" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <TimelineIcon />
          Â∑•Á®ãÁÆ°ÁêÜ
        </Typography>
        <Typography variant="body2" sx={{ opacity: 0.9 }}>
          ÈÄ†ÂúíÂ∑•‰∫ã„ÅÆÂ∑•Á®ãË°®‰ΩúÊàê„ÉªÈÄ≤ÊçóÁÆ°ÁêÜ
        </Typography>
      </Box>

      {error && (
        <Alert severity="error" sx={{ mx: 2, mb: 2 }}>
          {error}
        </Alert>
      )}

      {loading && (
        <Box sx={{ p: 2 }}>
          <LinearProgress />
          <Typography sx={{ mt: 1, textAlign: 'center' }}>Ë™≠„ÅøËæº„Åø‰∏≠...</Typography>
        </Box>
      )}

      <Box sx={{ px: 2 }}>
        {/* „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÈÅ∏Êäû */}
        <ProjectSelectionCard />

        {/* Â∑•Á®ãË°®Ê¶ÇË¶Å */}
        {currentSchedule && <ScheduleOverviewCard />}

        {/* „Çø„Çπ„ÇØ‰∏ÄË¶ß */}
        {currentSchedule && filteredTasks.length > 0 && <TaskListView />}

        {/* Â∑•Á®ãË°®„ÅåÊú™‰ΩúÊàê„ÅÆÂ†¥Âêà */}
        {!currentSchedule && (
          <Card sx={{ p: 3, textAlign: 'center' }}>
            <TimelineIcon sx={{ fontSize: 64, color: 'action.disabled', mb: 2 }} />
            <Typography variant="h6" gutterBottom>
              Â∑•Á®ãË°®„Çí‰ΩúÊàê„Åó„Åæ„Åó„Çá„ÅÜ
            </Typography>
            <Typography variant="body2" color="textSecondary" gutterBottom>
              Ê°à‰ª∂„ÇíÈÅ∏Êäû„Åó„Å¶„ÉÜ„É≥„Éó„É¨„Éº„Éà„Åã„ÇâÂ∑•Á®ãË°®„ÇíËá™ÂãïÁîüÊàê„Åß„Åç„Åæ„Åô
            </Typography>
          </Card>
        )}
      </Box>

      {/* „Éï„É≠„Éº„ÉÜ„Ç£„É≥„Ç∞„Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
      {currentSchedule && (
        <Fab
          color="primary"
          sx={{
            position: 'fixed',
            bottom: 80,
            right: 16,
            bgcolor: '#4CAF50',
            '&:hover': { bgcolor: '#388E3C' }
          }}
          onClick={() => {
            setEditingTask(null);
            setShowTaskDialog(true);
          }}
        >
          <AddIcon />
        </Fab>
      )}

      {/* „Éú„Éà„É†„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥ */}
      <BottomNavigation
        value={bottomNavValue}
        onChange={(event, newValue) => setBottomNavValue(newValue)}
        sx={{
          position: 'fixed',
          bottom: 0,
          left: 0,
          right: 0,
          borderTop: 1,
          borderColor: 'divider'
        }}
      >
        <BottomNavigationAction
          label="‰∏ÄË¶ß"
          icon={<ListIcon />}
          onClick={() => setViewMode('list')}
        />
        <BottomNavigationAction
          label="„Çø„Ç§„É†„É©„Ç§„É≥"
          icon={<TimelineIcon />}
          onClick={() => setViewMode('timeline')}
        />
        <BottomNavigationAction
          label="‰øùÂ≠ò"
          icon={<SaveIcon />}
          onClick={() => {
            // ‰øùÂ≠òÂá¶ÁêÜ
            console.log('‰øùÂ≠ò:', currentSchedule);
          }}
        />
      </BottomNavigation>

      {/* „Çø„Çπ„ÇØÁ∑®ÈõÜ„ÉÄ„Ç§„Ç¢„É≠„Ç∞ */}
      <Dialog
        open={showTaskDialog}
        onClose={() => setShowTaskDialog(false)}
        fullScreen={isMobile}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>
          {editingTask ? 'Â∑•Á®ãÁ∑®ÈõÜ' : 'Â∑•Á®ãËøΩÂä†'}
        </DialogTitle>
        <DialogContent>
          <Box sx={{ pt: 2 }}>
            <TextField
              fullWidth
              label="Â∑•Á®ãÂêç"
              variant="outlined"
              size="small"
              sx={{ mb: 2 }}
            />
            <TextField
              fullWidth
              label="Ë™¨Êòé"
              multiline
              rows={3}
              variant="outlined"
              size="small"
              sx={{ mb: 2 }}
            />
            <Grid container spacing={2}>
              <Grid item xs={6}>
                <TextField
                  fullWidth
                  label="ÈñãÂßãÊó•"
                  type="date"
                  size="small"
                  InputLabelProps={{ shrink: true }}
                />
              </Grid>
              <Grid item xs={6}>
                <TextField
                  fullWidth
                  label="ÊúüÈñìÔºàÊó•Ôºâ"
                  type="number"
                  size="small"
                />
              </Grid>
            </Grid>
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setShowTaskDialog(false)}>
            „Ç≠„É£„É≥„Çª„É´
          </Button>
          <Button 
            variant="contained"
            sx={{ bgcolor: '#4CAF50', '&:hover': { bgcolor: '#388E3C' } }}
          >
            ‰øùÂ≠ò
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default MobileProcessManager;